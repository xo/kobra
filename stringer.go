// Code generated by "stringer -type OnErr,CompDirective -output stringer.go"; DO NOT EDIT.

package ox

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OnErrExit-0]
	_ = x[OnErrContinue-1]
	_ = x[OnErrPanic-2]
}

const _OnErr_name = "OnErrExitOnErrContinueOnErrPanic"

var _OnErr_index = [...]uint8{0, 9, 22, 32}

func (i OnErr) String() string {
	if i >= OnErr(len(_OnErr_index)-1) {
		return "OnErr(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OnErr_name[_OnErr_index[i]:_OnErr_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CompError-1]
	_ = x[CompNoSpace-2]
	_ = x[CompNoFileComp-4]
	_ = x[CompFilterFileExt-8]
	_ = x[CompFilterDirs-16]
	_ = x[CompDefault-0]
}

const (
	_CompDirective_name_0 = "CompDefaultCompErrorCompNoSpace"
	_CompDirective_name_1 = "CompNoFileComp"
	_CompDirective_name_2 = "CompFilterFileExt"
	_CompDirective_name_3 = "CompFilterDirs"
)

var (
	_CompDirective_index_0 = [...]uint8{0, 11, 20, 31}
)

func (i CompDirective) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CompDirective_name_0[_CompDirective_index_0[i]:_CompDirective_index_0[i+1]]
	case i == 4:
		return _CompDirective_name_1
	case i == 8:
		return _CompDirective_name_2
	case i == 16:
		return _CompDirective_name_3
	default:
		return "CompDirective(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
